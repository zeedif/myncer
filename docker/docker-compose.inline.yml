services:
  # The 'db' service below is for local development only.
  # The production environment is configured to use a managed Google Cloud SQL instance.
  db:
    image: postgres:15-alpine
    container_name: postgres-db-container
    ports:
      - "5432:5432"
    volumes:
      # Persists database data across container restarts
      - pgdata:/var/lib/postgresql/data
      # To initialize the DB with a schema on first run, uncomment the line below.
      # The postgres image automatically runs any .sql files in /docker-entrypoint-initdb.d
      # - ./server/core/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped
    environment:
      - POSTGRES_DB=myncer
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
    healthcheck:
      # Command to check if postgres is ready to accept connections
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 30s
      timeout: 10s
      retries: 5

  server:
    build:
      context: ../server
      dockerfile: server.Dockerfile
    ports:
      - "8080:8080"
    restart: unless-stopped
    depends_on:
      db:
        # Wait for the healthcheck to pass before starting the server
        condition: service_healthy
    environment:
      # --- Database Connection ---
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=devuser
      - POSTGRES_PASSWORD=devpass
      - POSTGRES_DB=myncer
      - POSTGRES_SSLMODE=disable

      # --- Server & Auth ---
      - SERVER_MODE=DEV
      - JWT_SECRET=replace_this_with_a_strong_random_secret_for_prod

      # --- Spotify OAuth Credentials ---
      - SPOTIFY_CLIENT_ID=your_spotify_client_id # <-- IMPORTANT: Replace this
      - SPOTIFY_CLIENT_SECRET=your_spotify_client_secret # <-- IMPORTANT: Replace this
      - SPOTIFY_REDIRECT_URI=http://localhost/datasource/spotify/callback

      # --- YouTube OAuth Credentials ---
      - YOUTUBE_CLIENT_ID=your_youtube_client_id # <-- IMPORTANT: Replace this
      - YOUTUBE_CLIENT_SECRET=your_youtube_client_secret # <-- IMPORTANT: Replace this
      - YOUTUBE_REDIRECT_URI=http://localhost/datasource/youtube/callback

      # --- Tidal OAuth Credentials ---
      - TIDAL_CLIENT_ID=your_tidal_client_id # <-- IMPORTANT: Replace this
      - TIDAL_CLIENT_SECRET=your_tidal_client_secret # <-- IMPORTANT: Replace this
      - TIDAL_REDIRECT_URI=http://localhost/datasource/tidal/callback

      # --- LLM (Optional) ---
      - LLM_ENABLED=false
      - LLM_PROVIDER=GEMINI  # Options: GEMINI, OPENAI
      # - GEMINI_API_KEY=your_gemini_api_key
      # - OPENAI_API_KEY=your_openai_api_key

  web:
    build:
      context: ../myncer-web
      dockerfile: web.Dockerfile
    ports:
      - "80:80"
    restart: unless-stopped
    depends_on:
      - server
    environment:
      # --- Nginx Proxy Configuration ---
      - BACKEND_HOST=server
      - BACKEND_PORT=8080

      # --- Frontend Runtime Configuration ---
      - VITE_SPOTIFY_CLIENT_ID=your_spotify_client_id
      - VITE_SPOTIFY_REDIRECT_URI=http://localhost/datasource/spotify/callback
      - VITE_YOUTUBE_CLIENT_ID=your_youtube_client_id
      - VITE_YOUTUBE_REDIRECT_URI=http://localhost/datasource/youtube/callback
      - VITE_TIDAL_CLIENT_ID=your_tidal_client_id
      - VITE_TIDAL_REDIRECT_URI=http://localhost/datasource/tidal/callback

volumes:
  pgdata:
