// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: myncer/config.proto

package myncer_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServerMode int32

const (
	ServerMode_UNSPECIFIED ServerMode = 0
	ServerMode_PROD        ServerMode = 1
	ServerMode_DEV         ServerMode = 2
)

// Enum value maps for ServerMode.
var (
	ServerMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "PROD",
		2: "DEV",
	}
	ServerMode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"PROD":        1,
		"DEV":         2,
	}
)

func (x ServerMode) Enum() *ServerMode {
	p := new(ServerMode)
	*p = x
	return p
}

func (x ServerMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerMode) Descriptor() protoreflect.EnumDescriptor {
	return file_myncer_config_proto_enumTypes[0].Descriptor()
}

func (ServerMode) Type() protoreflect.EnumType {
	return &file_myncer_config_proto_enumTypes[0]
}

func (x ServerMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerMode.Descriptor instead.
func (ServerMode) EnumDescriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{0}
}

type LlmProvider int32

const (
	LlmProvider_LLM_PROVIDER_UNSPECIFIED LlmProvider = 0
	LlmProvider_GEMINI                   LlmProvider = 1
	LlmProvider_OPENAI                   LlmProvider = 2
)

// Enum value maps for LlmProvider.
var (
	LlmProvider_name = map[int32]string{
		0: "LLM_PROVIDER_UNSPECIFIED",
		1: "GEMINI",
		2: "OPENAI",
	}
	LlmProvider_value = map[string]int32{
		"LLM_PROVIDER_UNSPECIFIED": 0,
		"GEMINI":                   1,
		"OPENAI":                   2,
	}
)

func (x LlmProvider) Enum() *LlmProvider {
	p := new(LlmProvider)
	*p = x
	return p
}

func (x LlmProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LlmProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_myncer_config_proto_enumTypes[1].Descriptor()
}

func (LlmProvider) Type() protoreflect.EnumType {
	return &file_myncer_config_proto_enumTypes[1]
}

func (x LlmProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LlmProvider.Descriptor instead.
func (LlmProvider) EnumDescriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{1}
}

type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All database specific config lives in here.
	DatabaseConfig *DatabaseConfig `protobuf:"bytes,1,opt,name=database_config,json=databaseConfig,proto3" json:"database_config,omitempty"`
	// What mode the server is configured to run in.
	ServerMode ServerMode `protobuf:"varint,2,opt,name=server_mode,json=serverMode,proto3,enum=myncer.ServerMode" json:"server_mode,omitempty"`
	// Can generate using `openssl rand -hex 32`.
	JwtSecret     string         `protobuf:"bytes,3,opt,name=jwt_secret,json=jwtSecret,proto3" json:"jwt_secret,omitempty"`
	SpotifyConfig *SpotifyConfig `protobuf:"bytes,4,opt,name=spotify_config,json=spotifyConfig,proto3" json:"spotify_config,omitempty"`
	YoutubeConfig *YoutubeConfig `protobuf:"bytes,5,opt,name=youtube_config,json=youtubeConfig,proto3" json:"youtube_config,omitempty"`
	LlmConfig     *LlmConfig     `protobuf:"bytes,6,opt,name=llm_config,json=llmConfig,proto3" json:"llm_config,omitempty"`
	TidalConfig   *TidalConfig   `protobuf:"bytes,7,opt,name=tidal_config,json=tidalConfig,proto3" json:"tidal_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_myncer_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetDatabaseConfig() *DatabaseConfig {
	if x != nil {
		return x.DatabaseConfig
	}
	return nil
}

func (x *Config) GetServerMode() ServerMode {
	if x != nil {
		return x.ServerMode
	}
	return ServerMode_UNSPECIFIED
}

func (x *Config) GetJwtSecret() string {
	if x != nil {
		return x.JwtSecret
	}
	return ""
}

func (x *Config) GetSpotifyConfig() *SpotifyConfig {
	if x != nil {
		return x.SpotifyConfig
	}
	return nil
}

func (x *Config) GetYoutubeConfig() *YoutubeConfig {
	if x != nil {
		return x.YoutubeConfig
	}
	return nil
}

func (x *Config) GetLlmConfig() *LlmConfig {
	if x != nil {
		return x.LlmConfig
	}
	return nil
}

func (x *Config) GetTidalConfig() *TidalConfig {
	if x != nil {
		return x.TidalConfig
	}
	return nil
}

type Configs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        []*Config              `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Configs) Reset() {
	*x = Configs{}
	mi := &file_myncer_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configs) ProtoMessage() {}

func (x *Configs) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configs.ProtoReflect.Descriptor instead.
func (*Configs) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{1}
}

func (x *Configs) GetConfig() []*Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type DatabaseConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DatabaseUrl   string                 `protobuf:"bytes,1,opt,name=database_url,json=databaseUrl,proto3" json:"database_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfig) Reset() {
	*x = DatabaseConfig{}
	mi := &file_myncer_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfig) ProtoMessage() {}

func (x *DatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfig.ProtoReflect.Descriptor instead.
func (*DatabaseConfig) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseConfig) GetDatabaseUrl() string {
	if x != nil {
		return x.DatabaseUrl
	}
	return ""
}

type SpotifyConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Can be obtained from https://console.developers.google.com/apis/credentials.
	ClientId      string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RedirectUri   string `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpotifyConfig) Reset() {
	*x = SpotifyConfig{}
	mi := &file_myncer_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpotifyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotifyConfig) ProtoMessage() {}

func (x *SpotifyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotifyConfig.ProtoReflect.Descriptor instead.
func (*SpotifyConfig) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{3}
}

func (x *SpotifyConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SpotifyConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *SpotifyConfig) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type YoutubeConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Can be obtained from https://console.developers.google.com/apis/credentials.
	ClientId      string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RedirectUri   string `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *YoutubeConfig) Reset() {
	*x = YoutubeConfig{}
	mi := &file_myncer_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *YoutubeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YoutubeConfig) ProtoMessage() {}

func (x *YoutubeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YoutubeConfig.ProtoReflect.Descriptor instead.
func (*YoutubeConfig) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{4}
}

func (x *YoutubeConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *YoutubeConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *YoutubeConfig) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type TidalConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ClientId      string                 `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	ClientSecret  string                 `protobuf:"bytes,2,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	RedirectUri   string                 `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TidalConfig) Reset() {
	*x = TidalConfig{}
	mi := &file_myncer_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TidalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TidalConfig) ProtoMessage() {}

func (x *TidalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TidalConfig.ProtoReflect.Descriptor instead.
func (*TidalConfig) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{5}
}

func (x *TidalConfig) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TidalConfig) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *TidalConfig) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

type LlmConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether LLM has been enabled or not.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The preferred provider to use. We can potentially connect multiple LLMs.
	PreferredProvider LlmProvider `protobuf:"varint,2,opt,name=preferred_provider,json=preferredProvider,proto3,enum=myncer.LlmProvider" json:"preferred_provider,omitempty"`
	// The LlmConfig holds configurations across all providers.
	GeminiConfig  *GeminiConfig `protobuf:"bytes,3,opt,name=gemini_config,json=geminiConfig,proto3" json:"gemini_config,omitempty"`
	OpenaiConfig  *OpenAIConfig `protobuf:"bytes,4,opt,name=openai_config,json=openaiConfig,proto3" json:"openai_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LlmConfig) Reset() {
	*x = LlmConfig{}
	mi := &file_myncer_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LlmConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LlmConfig) ProtoMessage() {}

func (x *LlmConfig) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LlmConfig.ProtoReflect.Descriptor instead.
func (*LlmConfig) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{6}
}

func (x *LlmConfig) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *LlmConfig) GetPreferredProvider() LlmProvider {
	if x != nil {
		return x.PreferredProvider
	}
	return LlmProvider_LLM_PROVIDER_UNSPECIFIED
}

func (x *LlmConfig) GetGeminiConfig() *GeminiConfig {
	if x != nil {
		return x.GeminiConfig
	}
	return nil
}

func (x *LlmConfig) GetOpenaiConfig() *OpenAIConfig {
	if x != nil {
		return x.OpenaiConfig
	}
	return nil
}

type GeminiConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeminiConfig) Reset() {
	*x = GeminiConfig{}
	mi := &file_myncer_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeminiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeminiConfig) ProtoMessage() {}

func (x *GeminiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeminiConfig.ProtoReflect.Descriptor instead.
func (*GeminiConfig) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{7}
}

func (x *GeminiConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type OpenAIConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApiKey        string                 `protobuf:"bytes,2,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OpenAIConfig) Reset() {
	*x = OpenAIConfig{}
	mi := &file_myncer_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIConfig) ProtoMessage() {}

func (x *OpenAIConfig) ProtoReflect() protoreflect.Message {
	mi := &file_myncer_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIConfig.ProtoReflect.Descriptor instead.
func (*OpenAIConfig) Descriptor() ([]byte, []int) {
	return file_myncer_config_proto_rawDescGZIP(), []int{8}
}

func (x *OpenAIConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

var File_myncer_config_proto protoreflect.FileDescriptor

const file_myncer_config_proto_rawDesc = "" +
	"\n" +
	"\x13myncer/config.proto\x12\x06myncer\"\x83\x03\n" +
	"\x06Config\x12?\n" +
	"\x0fdatabase_config\x18\x01 \x01(\v2\x16.myncer.DatabaseConfigR\x0edatabaseConfig\x123\n" +
	"\vserver_mode\x18\x02 \x01(\x0e2\x12.myncer.ServerModeR\n" +
	"serverMode\x12\x1d\n" +
	"\n" +
	"jwt_secret\x18\x03 \x01(\tR\tjwtSecret\x12<\n" +
	"\x0espotify_config\x18\x04 \x01(\v2\x15.myncer.SpotifyConfigR\rspotifyConfig\x12<\n" +
	"\x0eyoutube_config\x18\x05 \x01(\v2\x15.myncer.YoutubeConfigR\ryoutubeConfig\x120\n" +
	"\n" +
	"llm_config\x18\x06 \x01(\v2\x11.myncer.LlmConfigR\tllmConfig\x126\n" +
	"\ftidal_config\x18\a \x01(\v2\x13.myncer.TidalConfigR\vtidalConfig\"1\n" +
	"\aConfigs\x12&\n" +
	"\x06config\x18\x01 \x03(\v2\x0e.myncer.ConfigR\x06config\"3\n" +
	"\x0eDatabaseConfig\x12!\n" +
	"\fdatabase_url\x18\x01 \x01(\tR\vdatabaseUrl\"t\n" +
	"\rSpotifyConfig\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12#\n" +
	"\rclient_secret\x18\x02 \x01(\tR\fclientSecret\x12!\n" +
	"\fredirect_uri\x18\x03 \x01(\tR\vredirectUri\"t\n" +
	"\rYoutubeConfig\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12#\n" +
	"\rclient_secret\x18\x02 \x01(\tR\fclientSecret\x12!\n" +
	"\fredirect_uri\x18\x03 \x01(\tR\vredirectUri\"r\n" +
	"\vTidalConfig\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\tR\bclientId\x12#\n" +
	"\rclient_secret\x18\x02 \x01(\tR\fclientSecret\x12!\n" +
	"\fredirect_uri\x18\x03 \x01(\tR\vredirectUri\"\xdf\x01\n" +
	"\tLlmConfig\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabled\x12B\n" +
	"\x12preferred_provider\x18\x02 \x01(\x0e2\x13.myncer.LlmProviderR\x11preferredProvider\x129\n" +
	"\rgemini_config\x18\x03 \x01(\v2\x14.myncer.GeminiConfigR\fgeminiConfig\x129\n" +
	"\ropenai_config\x18\x04 \x01(\v2\x14.myncer.OpenAIConfigR\fopenaiConfig\"'\n" +
	"\fGeminiConfig\x12\x17\n" +
	"\aapi_key\x18\x01 \x01(\tR\x06apiKey\"'\n" +
	"\fOpenAIConfig\x12\x17\n" +
	"\aapi_key\x18\x02 \x01(\tR\x06apiKey*0\n" +
	"\n" +
	"ServerMode\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\b\n" +
	"\x04PROD\x10\x01\x12\a\n" +
	"\x03DEV\x10\x02*C\n" +
	"\vLlmProvider\x12\x1c\n" +
	"\x18LLM_PROVIDER_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06GEMINI\x10\x01\x12\n" +
	"\n" +
	"\x06OPENAI\x10\x02B3Z1github.com/hansbala/myncer/proto/myncer;myncer_pbb\x06proto3"

var (
	file_myncer_config_proto_rawDescOnce sync.Once
	file_myncer_config_proto_rawDescData []byte
)

func file_myncer_config_proto_rawDescGZIP() []byte {
	file_myncer_config_proto_rawDescOnce.Do(func() {
		file_myncer_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_myncer_config_proto_rawDesc), len(file_myncer_config_proto_rawDesc)))
	})
	return file_myncer_config_proto_rawDescData
}

var file_myncer_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_myncer_config_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_myncer_config_proto_goTypes = []any{
	(ServerMode)(0),        // 0: myncer.ServerMode
	(LlmProvider)(0),       // 1: myncer.LlmProvider
	(*Config)(nil),         // 2: myncer.Config
	(*Configs)(nil),        // 3: myncer.Configs
	(*DatabaseConfig)(nil), // 4: myncer.DatabaseConfig
	(*SpotifyConfig)(nil),  // 5: myncer.SpotifyConfig
	(*YoutubeConfig)(nil),  // 6: myncer.YoutubeConfig
	(*TidalConfig)(nil),    // 7: myncer.TidalConfig
	(*LlmConfig)(nil),      // 8: myncer.LlmConfig
	(*GeminiConfig)(nil),   // 9: myncer.GeminiConfig
	(*OpenAIConfig)(nil),   // 10: myncer.OpenAIConfig
}
var file_myncer_config_proto_depIdxs = []int32{
	4,  // 0: myncer.Config.database_config:type_name -> myncer.DatabaseConfig
	0,  // 1: myncer.Config.server_mode:type_name -> myncer.ServerMode
	5,  // 2: myncer.Config.spotify_config:type_name -> myncer.SpotifyConfig
	6,  // 3: myncer.Config.youtube_config:type_name -> myncer.YoutubeConfig
	8,  // 4: myncer.Config.llm_config:type_name -> myncer.LlmConfig
	7,  // 5: myncer.Config.tidal_config:type_name -> myncer.TidalConfig
	2,  // 6: myncer.Configs.config:type_name -> myncer.Config
	1,  // 7: myncer.LlmConfig.preferred_provider:type_name -> myncer.LlmProvider
	9,  // 8: myncer.LlmConfig.gemini_config:type_name -> myncer.GeminiConfig
	10, // 9: myncer.LlmConfig.openai_config:type_name -> myncer.OpenAIConfig
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_myncer_config_proto_init() }
func file_myncer_config_proto_init() {
	if File_myncer_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_myncer_config_proto_rawDesc), len(file_myncer_config_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_myncer_config_proto_goTypes,
		DependencyIndexes: file_myncer_config_proto_depIdxs,
		EnumInfos:         file_myncer_config_proto_enumTypes,
		MessageInfos:      file_myncer_config_proto_msgTypes,
	}.Build()
	File_myncer_config_proto = out.File
	file_myncer_config_proto_goTypes = nil
	file_myncer_config_proto_depIdxs = nil
}
